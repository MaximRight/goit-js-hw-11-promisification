{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","callback","updatedUsers","map","user","all","table","makeTransaction","transaction","reject","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"mKAAMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OACxBC,YAAW,WACTD,EAAQF,KACPA,OAQDI,EAAS,SAAAC,GAAI,OACjBC,QAAQC,IAAR,gCACkCF,EADlC,KAEE,iCAIJN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,gECnBXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,EAAUC,GAC3C,OAAO,IAAId,SAAQ,SAAAC,GACjB,IAAMc,EAAeH,EAASI,KAAI,SAAAC,GAAI,OACpCA,EAAKR,OAASI,EAAd,iBAA8BI,EAA9B,CAAoCP,QAASO,EAAKP,SAAWO,KAE/DjB,QAAQkB,IAAIH,GAAcR,KAAKF,QAAQc,WAKrChB,EAAS,SAAAY,GAAY,OAAIV,QAAQc,MAAMJ,IAqB7CJ,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCzCnC,IAIMiB,EAAkB,SAAAC,GACtB,OAAO,IAAIrB,SAAQ,SAACC,EAASqB,GAC3B,IAN+BC,EAAKC,EAM9B1B,GANyByB,EAMS,IANJC,EAMS,IALxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAOlDrB,YAAW,WACUuB,KAAKE,SAAW,IAGjC1B,EAAQ,CAAE2B,GAAIP,EAAYO,GAAIxB,KAAMN,IAGtCwB,EAAOD,EAAYO,MAElB9B,OAID+B,EAAa,SAAC,GAAiB,IAAfD,EAAe,EAAfA,GAAIxB,EAAW,EAAXA,KACxBC,QAAQC,IAAR,6BAC+BsB,EAD/B,iBACkDxB,EADlD,KAEE,kCAIE0B,EAAW,SAAAF,GACfvB,QAAQ0B,KAAR,8CACgDH,EADhD,4BAEE,kCAMJR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOzB,KAAKsB,GAAYI,MAAMH,GAEhEV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOzB,KAAKsB,GAAYI,MAAMH,GAEhEV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAAMzB,KAAKsB,GAAYI,MAAMH,GAE/DV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOzB,KAAKsB,GAAYI,MAAMH,I","file":"main.2456ee589bb2676cdc64.js","sourcesContent":["const delay = ms => {\n  return new Promise(resolve =>\n    setTimeout(() => {\n      resolve(ms);\n    }, ms),\n  );\n  // Твой код\n};\n\n// '%c Заезд окончен, принимаются ставки.',\n//   'color: blue; font-size: 16px;',\n\nconst logger = time =>\n  console.log(\n    `%c Первое дз: Resolved after ${time}ms`,\n    'color: green; font-size:16px',\n  );\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд. Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\n","// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, а принимала всего два параметра allUsers и userName и возвращала промис.\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName, callback) => {\n  return new Promise(resolve => {\n    const updatedUsers = allUsers.map(user =>\n      user.name === userName ? { ...user, active: !user.active } : user,\n    );\n    Promise.all(updatedUsers).then(console.table);\n    //   callback(updatedUsers);\n  });\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n// Promise.all(promises)\n//   .then(results => {\n//     console.log(\n//       '%c 📝 Заезд окончен, принимаются ставки.',\n//       'color: blue; font-size: 16px;',\n//     );\n//     console.table(results);\n//   })\n//   .catch(console.log);\n\n/*\n * Сейчас работает так\n */\n// toggleUserState(users, 'Mango', logger);\n// toggleUserState(users, 'Lux', logger);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  return new Promise((resolve, reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({ id: transaction.id, time: delay });\n      }\n      //   else {\n      reject(transaction.id);\n      //   }\n    }, delay);\n  });\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(\n    `%c Третье дз: Transaction ${id} processed in ${time}ms`,\n    'color: orange; font-size:16px',\n  );\n};\n\nconst logError = id => {\n  console.warn(\n    `%c Третье дз: Error processing transaction ${id}. Please try again later.`,\n    'color: orange; font-size:16px',\n  );\n};\n\n// makeTransaction({ id: 70, amount: 150 }).then(console.log);\n\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n"],"sourceRoot":""}